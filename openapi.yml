openapi: '3.0.3'
info:
  title: Mercury
  version: '0.1.1'
servers:
  - url: http://localhost:8000
    description: Local

paths:
  /candidate_labels:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelMeta'

  /user/me:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
      security:
        - OAuth2: []

  /user/name:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
      security:
        - OAuth2: []

  /user/export:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabelData'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
      security:
        - OAuth2: []

  /task:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  all:
                    type: integer

  /task/{task_index}:
    get:
      parameters:
        - name: task_index
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Task'
                  - $ref: '#/components/schemas/RequestError'

  /task/{task_index}/history:
    get:
      parameters:
        - name: task_index
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabelData'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
      security:
        - OAuth2: []
  
  /task/{task_index}/label:
    post:
      parameters:
        - name: task_index
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
      security:
        - OAuth2: []

  /task/{task_index}/label/{record_id}:
    patch:
      parameters:
        - name: task_index
          in: path
          required: true
          schema:
            type: integer
        - name: record_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
      security:
        - OAuth2: []

  /task/{task_index}/select:
    post:
      parameters:
        - name: task_index
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Selection'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/SelectionResponseSlice'
                  - $ref: '#/components/schemas/RequestError'

  /annot/{annot_index}/comments:
    parameters:
      - name: annot_index
        in: path
        required: true
        schema:
          type: integer

    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
      security:
        - OAuth2: []

  /annot/{annot_index}/comments/{comment_id}:
    parameters:
      - name: annot_index
        in: path
        required: true
        schema:
          type: integer
      - name: comment_id
        in: path
        required: true
        schema:
          type: integer

    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
        '403':
          description: Forbidden
      security:
        - OAuth2: []
    
    delete:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
        '403':
          description: Forbidden
      security:
        - OAuth2: []
  
  /record/{record_id}:
    delete:
      parameters:
        - name: record_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPException'
      security:
        - OAuth2: []

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: /login
  schemas:
    HTTPException:
      type: object
      properties:
        detail:
          type: string

    RequestMessage:
      type: object
      properties:
        message:
          type: string

    RequestError:
      type: object
      properties:
        error:
          type: string
    
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string

    LabelMeta:
      type: array
      items:
        oneOf:
          - type: string
          - type: object
            properties:
              LABEL:
                type: array
                items:
                  type: string

    LabelData:
      type: object
      required:
        - record_id
        - sample_id
        - summary_start
        - summary_end
        - source_start
        - source_end
        - consistent
        - task_index
        - user_id
        - note
      properties:
        record_id:
          type: string
        sample_id:
          type: string
        summary_start:
          type: integer
        summary_end:
          type: integer
        source_start:
          type: integer
        source_end:
          type: integer
        consistent:
          type: array
          items:
            type: string
        task_index:
          type: integer
        user_id:
          type: string
        note:
          type: string
        username:
          type: string
    
    Label:
      type: object
      properties:
        summary_start:
          type: integer
        summary_end:
          type: integer
        source_start:
          type: integer
        source_end:
          type: integer
        consistent:
          type: array
          items:
            type: string
        note:
          type: string

    Task:
      type: object
      properties:
        doc:
          type: string
        sum:
          type: string

    Selection:
      type: object
      properties:
        start:
          type: integer
        end:
          type: integer
        from_summary:
          type: boolean
    
    SelectionResponseSlice:
      type: object
      properties:
        score:
          type: number
        offset:
          type: integer
        len:
          type: integer
        to_doc:
          type: boolean

    Comment:
      type: object
      properties:
        comment_id:
          type: integer
        user_id:
          type: string
        username:
          type: string
        annot_id:
          type: integer
        parent_id:
          type: integer
          nullable: true
        text:
          type: string
        comment_time:
          type: string

    CommentData:
      type: object
      required:
        - annot_id
        - text
      properties:
        annot_id:
          type: integer
        parent_id:
          type: integer
          nullable: true
        text:
          type: string
